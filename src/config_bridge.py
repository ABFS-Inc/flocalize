#!/usr/bin/env python3
"""
Configuration Bridge for Flocalize
Loads environment variables from secrets.env and makes them available to the JavaScript application
"""

import os
import json
from dotenv import load_dotenv

def load_environment_config():
    """Load environment variables from secrets.env"""
    # Change to parent directory to find secrets.env
    script_dir = os.path.dirname(os.path.abspath(__file__))
    parent_dir = os.path.dirname(script_dir)
    os.chdir(parent_dir)
    
    # Load environment variables from secrets.env
    load_dotenv('secrets.env')
    
    return {
        'geoapify': os.getenv('GEOAPIFY_API_KEY'),
        'safegraph': os.getenv('SAFEGRAPH_API_KEY'),
        'foursquare': os.getenv('FOURSQUARE_API_KEY'),
        'instagram': os.getenv('INSTAGRAM_ACCESS_TOKEN'),
        'googlePlaces': os.getenv('GOOGLE_PLACES_API_KEY'),
        'census': os.getenv('CENSUS_API_KEY'),
        'anthropic': os.getenv('ANTHROPIC_API_KEY'),
        'xai': os.getenv('XAI_API_KEY'),
        'google': os.getenv('GOOGLE_API_KEY')
    }

def generate_config_js():
    """Generate a config.js file with environment variables for the browser"""
    config = load_environment_config()
    
    # Filter out None values and empty strings
    filtered_config = {k: v for k, v in config.items() if v and v.strip()}
    
    js_content = f"""// Auto-generated configuration file
// DO NOT edit this file manually - it's generated from secrets.env

const CONFIG = {json.dumps(filtered_config, indent=2)};

// Export for browser environment
if (typeof window !== 'undefined') {{
    window.FloCalizeConfig = {{
        get: function(service) {{
            return CONFIG[service] || null;
        }}
    }};
}}

// Export for Node.js environment
if (typeof module !== 'undefined' && module.exports) {{
    module.exports = CONFIG;
}}
"""
    
    # Write to the root directory
    config_path = os.path.join(os.getcwd(), 'config-generated.js')
    with open(config_path, 'w') as f:
        f.write(js_content)
    
    print(f"‚úÖ Generated config-generated.js with {len(filtered_config)} API keys")
    return config_path

if __name__ == "__main__":
    print("üîß Loading configuration from secrets.env...")
    config_path = generate_config_js()
    print(f"üìÅ Config file created at: {config_path}")
    print("‚ö†Ô∏è  Remember to include config-generated.js in your HTML before other scripts")
